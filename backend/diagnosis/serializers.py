from django.contrib.auth.models import User
from rest_framework import serializers
from .models import HCVPatient, HCVResult, DiagnosisRecord


from django.contrib.auth.models import User
from rest_framework import serializers
from drf_spectacular.utils import extend_schema_field
from drf_spectacular.types import OpenApiTypes
from .models import HCVPatient, HCVResult, DiagnosisRecord


class HCVPatientSerializer(serializers.ModelSerializer):
    """
    Serializer for HCV Patient data with comprehensive liver function test parameters.

    This serializer handles patient information and laboratory values required for
    hepatitis C diagnosis and stage prediction.
    """

    class Meta:
        model = HCVPatient
        fields = [
            "id",
            "patient_name",
            "age",
            "sex",
            "alp",
            "ast",
            "che",
            "crea",
            "ggt",
            "alb",
            "bil",
            "chol",
            "prot",
            "alt",
            "symptoms",
            "created_at",
            "updated_at",
            "created_by",
        ]
        extra_kwargs = {
            "created_by": {
                "read_only": True,
                "help_text": "User who created this patient record",
            },
            "id": {"read_only": True, "help_text": "Unique patient identifier"},
            "created_at": {
                "read_only": True,
                "help_text": "Timestamp when patient was created",
            },
            "updated_at": {
                "read_only": True,
                "help_text": "Timestamp when patient was last updated",
            },
            "patient_name": {"help_text": "Full name of the patient"},
            "age": {"help_text": "Patient age in years (1-120)"},
            "sex": {"help_text": "Patient biological sex (M/F)"},
            "alp": {"help_text": "Alkaline phosphatase level (U/L)"},
            "ast": {"help_text": "Aspartate aminotransferase level (U/L)"},
            "che": {"help_text": "Cholinesterase level (U/L)"},
            "crea": {"help_text": "Creatinine level (mg/dL)"},
            "ggt": {"help_text": "Gamma-glutamyl transferase level (U/L)"},
            # Optional fields - can be null
            "alb": {
                "required": False,
                "allow_null": True,
                "help_text": "Albumin level (g/dL) - optional",
            },
            "bil": {
                "required": False,
                "allow_null": True,
                "help_text": "Bilirubin level (mg/dL) - optional",
            },
            "chol": {
                "required": False,
                "allow_null": True,
                "help_text": "Cholesterol level (mg/dL) - optional",
            },
            "prot": {
                "required": False,
                "allow_null": True,
                "help_text": "Protein level (g/dL) - optional",
            },
            "alt": {
                "required": False,
                "allow_null": True,
                "help_text": "Alanine aminotransferase level (U/L) - optional",
            },
            "symptoms": {
                "required": False,
                "help_text": "Additional symptoms or clinical notes",
            },
        }

    def validate_alb(self, value):
        if value == "" or value is None:
            return None
        return value

    def validate_bil(self, value):
        if value == "" or value is None:
            return None
        return value

    def validate_chol(self, value):
        if value == "" or value is None:
            return None
        return value

    def validate_prot(self, value):
        if value == "" or value is None:
            return None
        return value

    def validate_alt(self, value):
        if value == "" or value is None:
            return None
        return value


class HCVResultSerializer(serializers.ModelSerializer):
    """
    Serializer for HCV diagnosis results generated by AI model.

    Contains the complete diagnosis output including status prediction,
    stage classification, confidence scores, and clinical recommendations.
    """

    stage_predictions = serializers.JSONField(
        help_text="Probability scores for each HCV stage (F0-F4)", read_only=True
    )

    class Meta:
        model = HCVResult
        fields = [
            "patient",
            "hcv_status",
            "hcv_status_probability",
            "hcv_risk",
            "hcv_stage",
            "confidence",
            "stage_predictions",
            "recommendation",
            "created_at",
            "updated_at",
        ]
        extra_kwargs = {
            "patient": {"help_text": "Reference to the patient this result belongs to"},
            "hcv_status": {"help_text": "Predicted HCV status (Positive/Negative)"},
            "hcv_status_probability": {
                "help_text": "Confidence probability for HCV status (0.0-1.0)"
            },
            "hcv_risk": {"help_text": "Risk level assessment (Low/Medium/High)"},
            "hcv_stage": {"help_text": "Predicted fibrosis stage (F0-F4)"},
            "confidence": {
                "help_text": "Overall model confidence in prediction (0.0-1.0)"
            },
            "recommendation": {"help_text": "Clinical recommendation based on results"},
            "created_at": {
                "read_only": True,
                "help_text": "Timestamp when result was generated",
            },
            "updated_at": {
                "read_only": True,
                "help_text": "Timestamp when result was last updated",
            },
        }


class DiagnosisRecordSerializer(serializers.ModelSerializer):
    """
    Comprehensive serializer for complete diagnosis records.

    Combines patient information, laboratory values, and AI diagnosis results
    into a single comprehensive view for diagnosis history and reporting.
    """

    # Patient information with detailed help text
    patient_name = serializers.CharField(
        source="patient.patient_name", read_only=True, help_text="Patient's full name"
    )
    age = serializers.IntegerField(
        source="patient.age", read_only=True, help_text="Patient's age in years"
    )
    sex = serializers.CharField(
        source="patient.sex", read_only=True, help_text="Patient's biological sex (M/F)"
    )
    created_by_username = serializers.CharField(
        source="patient.created_by.username",
        read_only=True,
        help_text="Username of the healthcare provider who created this record",
    )

    # Lab values with detailed descriptions
    alp = serializers.FloatField(
        source="patient.alp",
        read_only=True,
        help_text="Alkaline phosphatase level (U/L)",
    )
    ast = serializers.FloatField(
        source="patient.ast",
        read_only=True,
        help_text="Aspartate aminotransferase level (U/L)",
    )
    che = serializers.FloatField(
        source="patient.che", read_only=True, help_text="Cholinesterase level (U/L)"
    )
    crea = serializers.FloatField(
        source="patient.crea", read_only=True, help_text="Creatinine level (mg/dL)"
    )
    ggt = serializers.FloatField(
        source="patient.ggt",
        read_only=True,
        help_text="Gamma-glutamyl transferase level (U/L)",
    )

    # Results with comprehensive descriptions
    hcv_status = serializers.CharField(
        source="result.hcv_status",
        read_only=True,
        help_text="AI-predicted HCV infection status",
    )
    hcv_status_probability = serializers.FloatField(
        source="result.hcv_status_probability",
        read_only=True,
        help_text="Confidence probability for HCV status prediction (0.0-1.0)",
    )
    hcv_risk = serializers.CharField(
        source="result.hcv_risk",
        read_only=True,
        help_text="Risk level assessment based on lab values and patient data",
    )
    hcv_stage = serializers.CharField(
        source="result.hcv_stage",
        read_only=True,
        help_text="Predicted liver fibrosis stage (F0-F4)",
    )
    confidence = serializers.FloatField(
        source="result.confidence",
        read_only=True,
        help_text="Overall model confidence in the diagnosis (0.0-1.0)",
    )
    stage_predictions = serializers.JSONField(
        source="result.stage_predictions",
        read_only=True,
        help_text="Detailed probability scores for each fibrosis stage",
    )
    recommendation = serializers.CharField(
        source="result.recommendation",
        read_only=True,
        help_text="Clinical recommendations based on diagnosis results",
    )

    class Meta:
        model = DiagnosisRecord
        fields = [
            "id",
            "patient_name",
            "age",
            "sex",
            "created_by_username",
            "alp",
            "ast",
            "che",
            "crea",
            "ggt",
            "hcv_status",
            "hcv_status_probability",
            "hcv_risk",
            "hcv_stage",
            "confidence",
            "stage_predictions",
            "recommendation",
            "diagnosis_completed",
            "analysis_duration",
            "created_at",
            "updated_at",
        ]
        extra_kwargs = {
            "id": {
                "read_only": True,
                "help_text": "Unique diagnosis record identifier",
            },
            "diagnosis_completed": {
                "help_text": "Whether the AI diagnosis process has completed successfully"
            },
            "analysis_duration": {
                "help_text": "Time taken to complete the diagnosis analysis (in seconds)"
            },
            "created_at": {
                "read_only": True,
                "help_text": "Timestamp when diagnosis record was created",
            },
            "updated_at": {
                "read_only": True,
                "help_text": "Timestamp when diagnosis record was last updated",
            },
        }
