from django.contrib.auth.models import User
from rest_framework import serializers
from drf_spectacular.utils import extend_schema_field
from drf_spectacular.types import OpenApiTypes
from .models import HCVPatient, HCVResult


class HCVPatientSerializer(serializers.ModelSerializer):
    """
    Serializer for HCV Patient data with comprehensive liver function test parameters.
    """

    created_by = serializers.SerializerMethodField()

    class Meta:
        model = HCVPatient
        fields = [
            "id",
            "patient_name",
            "age",
            "sex",
            "alp",
            "ast",
            "che",
            "crea",
            "ggt",
            "alb",
            "bil",
            "chol",
            "prot",
            "alt",
            "symptoms",
            "created_at",
            "updated_at",
            "created_by",
        ]
        extra_kwargs = {
            "id": {"read_only": True},
            "created_at": {"read_only": True},
            "created_by": {"read_only": True},
            "updated_at": {"read_only": True},
            # Optional fields
            "alb": {"required": False, "allow_null": True},
            "bil": {"required": False, "allow_null": True},
            "chol": {"required": False, "allow_null": True},
            "prot": {"required": False, "allow_null": True},
            "alt": {"required": False, "allow_null": True},
            "symptoms": {"required": False},
        }

    def get_created_by(self, obj):
        """Return user's full name if available, otherwise email"""
        if obj.created_by:
            return (
                obj.created_by.full_name
                if obj.created_by.full_name
                else obj.created_by.email
            )
        return None

    def validate_alb(self, value):
        if value == "" or value is None:
            return None
        return value

    def validate_bil(self, value):
        if value == "" or value is None:
            return None
        return value

    def validate_chol(self, value):
        if value == "" or value is None:
            return None
        return value

    def validate_prot(self, value):
        if value == "" or value is None:
            return None
        return value

    def validate_alt(self, value):
        if value == "" or value is None:
            return None
        return value


class HCVResultSerializer(serializers.ModelSerializer):
    """
    Serializer for HCV diagnosis results generated by AI model.
    """

    class Meta:
        model = HCVResult
        fields = [
            "patient",
            "hcv_status",
            "hcv_status_probability",
            "hcv_risk",
            "hcv_stage",
            "confidence",
            "stage_predictions",
            "recommendation",
            "diagnosis_completed",
            "analysis_duration",
            "created_at",
            "updated_at",
        ]
        extra_kwargs = {
            "created_at": {"read_only": True},
            "updated_at": {"read_only": True},
        }


class PatientWithResultSerializer(serializers.ModelSerializer):
    """
    Comprehensive serializer that includes patient data with their HCV result.
    """

    hcv_result = HCVResultSerializer(read_only=True)
    created_by = serializers.SerializerMethodField()

    class Meta:
        model = HCVPatient
        fields = [
            "id",
            "patient_name",
            "age",
            "sex",
            "alp",
            "ast",
            "che",
            "crea",
            "ggt",
            "alb",
            "bil",
            "chol",
            "prot",
            "alt",
            "symptoms",
            "created_at",
            "updated_at",
            "created_by",
            "hcv_result",
        ]
        extra_kwargs = {
            "id": {"read_only": True},
            "created_at": {"read_only": True},
            "created_by": {"read_only": True},
            "updated_at": {"read_only": True},
        }

    def get_created_by(self, obj):
        """Return user's full name if available, otherwise email"""
        if obj.created_by:
            return (
                obj.created_by.full_name
                if obj.created_by.full_name
                else obj.created_by.email
            )
        return None
