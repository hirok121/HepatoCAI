openapi: 3.0.3
info:
  title: HepatoCAI API
  version: 1.0.0
  description: A comprehensive API for hepatitis C diagnosis and management using
    AI-powered tools.
  contact:
    name: HepatoCAI API Support
    email: api-support@hepatocai.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
paths:
  /accounts/token/:
    post:
      operationId: accounts_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
        required: true
      responses:
        '200':
          description: No response body
  /accounts/token/refresh/:
    post:
      operationId: accounts_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /users/register/:
    post:
      operationId: register_user
      description: Register a new user account. Account will require email verification
        before activation.
      summary: User registration
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          description: Registration successful
        '400':
          description: Validation error or user already exists
        '429':
          description: Rate limit exceeded
        '500':
          description: Internal server error
  /users/profile/me/:
    patch:
      operationId: user_profile_2
      description: Get or update the authenticated user's profile information.
      summary: User profile operations
      tags:
      - User Profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProfileRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProfileRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProfileRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Profile operation successful
        '400':
          description: Validation error
        '401':
          description: Authentication required
        '500':
          description: Internal server error
    get:
      operationId: user_profile
      description: Get or update the authenticated user's profile information.
      summary: User profile operations
      tags:
      - User Profile
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Profile operation successful
        '400':
          description: Validation error
        '401':
          description: Authentication required
        '500':
          description: Internal server error
  /users/reset-password/validate_token/:
    post:
      operationId: users_reset_password_validate_token_create
      description: An Api View which provides a method to verify that a token is valid
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetTokenRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetTokenRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetTokenRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetToken'
          description: ''
  /users/reset-password/confirm/:
    post:
      operationId: users_reset_password_confirm_create
      description: An Api View which provides a method to reset a password based on
        a unique token
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordTokenRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordTokenRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordTokenRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordToken'
          description: ''
  /users/reset-password/:
    post:
      operationId: users_reset_password_create
      description: |-
        An Api View which provides a method to request a password reset token based on an e-mail address

        Sends a signal reset_password_token_created when a reset token was created
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EmailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EmailRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: ''
  /users/check-email/:
    post:
      operationId: check_email_availability
      description: Check if an email address is already registered in the system.
      summary: Check email availability
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailCheckRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EmailCheckRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EmailCheckRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: Email check completed successfully
        '400':
          description: Invalid email format or input data
        '429':
          description: Rate limit exceeded
        '500':
          description: Internal server error
  /users/admin/users/:
    get:
      operationId: user_management_list
      description: Get comprehensive list of all users for admin management. Accessible
        by staff, only superusers can modify.
      summary: List all users
      tags:
      - User Management
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Users retrieved successfully
        '403':
          description: Permission denied - staff required
        '500':
          description: Internal server error
    patch:
      operationId: user_management_update
      description: Update user permissions following hierarchy (user -> staff -> superuser).
        Only accessible by superusers.
      summary: Update user permissions
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        description: ID of the user to update
        required: true
      tags:
      - User Management
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                  - promote_to_staff
                  - promote_to_superuser
                  - demote_from_staff
                  - demote_from_superuser
                  - activate
                  - deactivate
                  description: Action to perform on user
                is_staff:
                  type: boolean
                  description: Staff status (deprecated - use action instead)
                is_superuser:
                  type: boolean
                  description: Superuser status (deprecated - use action instead)
                is_active:
                  type: boolean
                  description: Account activation status
      security:
      - jwtAuth: []
      responses:
        '200':
          description: User permissions updated successfully
        '400':
          description: Bad request - invalid data
        '403':
          description: Permission denied
        '404':
          description: User not found
        '500':
          description: Internal server error
  /users/admin/users/{user_id}/:
    get:
      operationId: user_management_list_2
      description: Get comprehensive list of all users for admin management. Accessible
        by staff, only superusers can modify.
      summary: List all users
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - User Management
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Users retrieved successfully
        '403':
          description: Permission denied - staff required
        '500':
          description: Internal server error
    patch:
      operationId: user_management_update_2
      description: Update user permissions following hierarchy (user -> staff -> superuser).
        Only accessible by superusers.
      summary: Update user permissions
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        description: ID of the user to update
        required: true
      tags:
      - User Management
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                  - promote_to_staff
                  - promote_to_superuser
                  - demote_from_staff
                  - demote_from_superuser
                  - activate
                  - deactivate
                  description: Action to perform on user
                is_staff:
                  type: boolean
                  description: Staff status (deprecated - use action instead)
                is_superuser:
                  type: boolean
                  description: Superuser status (deprecated - use action instead)
                is_active:
                  type: boolean
                  description: Account activation status
      security:
      - jwtAuth: []
      responses:
        '200':
          description: User permissions updated successfully
        '400':
          description: Bad request - invalid data
        '403':
          description: Permission denied
        '404':
          description: User not found
        '500':
          description: Internal server error
  /diagnosis/analyze-hcv/:
    get:
      operationId: diagnosis_analyze_hcv_retrieve
      description: Get patients with results created by the authenticated user
      tags:
      - diagnosis
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HCVPatient'
          description: ''
    post:
      operationId: diagnose_hcv
      description: Submit patient data and laboratory values for AI-powered hepatitis
        C diagnosis and staging
      summary: Diagnose HCV using AI
      tags:
      - Diagnosis
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HCVPatientRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HCVPatientRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HCVPatientRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientWithResult'
          description: Successful diagnosis with AI predictions
        '400':
          description: Validation error - invalid input data
        '401':
          description: Authentication required
        '500':
          description: Internal server error during diagnosis
    put:
      operationId: diagnosis_analyze_hcv_update
      description: Update patient record (only basic information, not diagnosis results)
      tags:
      - diagnosis
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HCVPatientRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HCVPatientRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HCVPatientRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HCVPatient'
          description: ''
    delete:
      operationId: diagnosis_analyze_hcv_destroy
      description: Delete a specific patient record (only if owned by user)
      tags:
      - diagnosis
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /diagnosis/analyze-hcv/{id}/:
    get:
      operationId: diagnosis_analyze_hcv_retrieve_2
      description: Get patients with results created by the authenticated user
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - diagnosis
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HCVPatient'
          description: ''
    post:
      operationId: diagnose_hcv_2
      description: Submit patient data and laboratory values for AI-powered hepatitis
        C diagnosis and staging
      summary: Diagnose HCV using AI
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Diagnosis
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HCVPatientRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HCVPatientRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HCVPatientRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientWithResult'
          description: Successful diagnosis with AI predictions
        '400':
          description: Validation error - invalid input data
        '401':
          description: Authentication required
        '500':
          description: Internal server error during diagnosis
    put:
      operationId: diagnosis_analyze_hcv_update_2
      description: Update patient record (only basic information, not diagnosis results)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - diagnosis
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HCVPatientRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HCVPatientRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HCVPatientRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HCVPatient'
          description: ''
    delete:
      operationId: diagnosis_analyze_hcv_destroy_2
      description: Delete a specific patient record (only if owned by user)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - diagnosis
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /diagnosis/analytics/user/:
    get:
      operationId: user_diagnosis_analytics
      description: Get comprehensive diagnosis analytics for the authenticated user's
        personal dashboard.
      summary: User diagnosis analytics
      tags:
      - Analytics
      security:
      - jwtAuth: []
      responses:
        '200':
          description: User analytics retrieved successfully
        '401':
          description: Authentication required
        '500':
          description: Internal server error
  /diagnosis/analytics/admin/:
    get:
      operationId: admin_diagnosis_analytics
      description: Get comprehensive diagnosis analytics for admin dashboard. Only
        accessible by staff users.
      summary: Admin diagnosis analytics
      tags:
      - Analytics
      - Admin
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Admin analytics retrieved successfully
        '401':
          description: Authentication required
        '403':
          description: Staff access required
        '500':
          description: Internal server error
  /diagnosis/search/:
    get:
      operationId: search_patients
      description: Advanced search and filtering for user's own patient records with
        pagination support.
      summary: Search user's patient records
      parameters:
      - in: query
        name: date_from
        schema:
          type: string
          format: date-time
        description: Filter records from this date
      - in: query
        name: date_to
        schema:
          type: string
          format: date-time
        description: Filter records until this date
      - in: query
        name: hcv_risk
        schema:
          type: string
        description: Filter by HCV risk level
      - in: query
        name: hcv_status
        schema:
          type: string
        description: Filter by HCV status
      - in: query
        name: max_age
        schema:
          type: integer
        description: Maximum patient age
      - in: query
        name: max_confidence
        schema:
          type: number
          format: float
        description: Maximum confidence threshold
      - in: query
        name: min_age
        schema:
          type: integer
        description: Minimum patient age
      - in: query
        name: min_confidence
        schema:
          type: number
          format: float
        description: Minimum confidence threshold
      - in: query
        name: order_by
        schema:
          type: string
        description: Order results by field
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: query
        name: patient_name
        schema:
          type: string
        description: Filter by patient name (partial match)
      tags:
      - Search
      - Patients
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Search completed successfully
        '400':
          description: Invalid pagination parameters
        '401':
          description: Authentication required
        '500':
          description: Internal server error
  /diagnosis/admin/search/:
    get:
      operationId: admin_search_patients
      description: Advanced search and filtering for ALL patient records in the system.
        Only accessible by staff users.
      summary: Admin search all patient records
      parameters:
      - in: query
        name: created_by
        schema:
          type: string
        description: Filter by user who created the record
      - in: query
        name: date_from
        schema:
          type: string
          format: date-time
        description: Filter records from this date
      - in: query
        name: date_to
        schema:
          type: string
          format: date-time
        description: Filter records until this date
      - in: query
        name: hcv_risk
        schema:
          type: string
        description: Filter by HCV risk level
      - in: query
        name: hcv_status
        schema:
          type: string
        description: Filter by HCV status
      - in: query
        name: max_age
        schema:
          type: integer
        description: Maximum patient age
      - in: query
        name: max_confidence
        schema:
          type: number
          format: float
        description: Maximum confidence threshold
      - in: query
        name: min_age
        schema:
          type: integer
        description: Minimum patient age
      - in: query
        name: min_confidence
        schema:
          type: number
          format: float
        description: Minimum confidence threshold
      - in: query
        name: order_by
        schema:
          type: string
        description: Order results by field
      - in: query
        name: page
        schema:
          type: integer
        description: Page number
      - in: query
        name: page_size
        schema:
          type: integer
        description: Number of results per page
      - in: query
        name: patient_name
        schema:
          type: string
        description: Filter by patient name (partial match)
      tags:
      - Search
      - Admin
      - Patients
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Admin search completed successfully
        '400':
          description: Invalid pagination parameters
        '401':
          description: Authentication required
        '403':
          description: Staff access required
        '500':
          description: Internal server error
  /diagnosis/records/:
    get:
      operationId: list_patients
      description: Get list of all patient records for admin management. Only accessible
        by staff users or superuser.
      summary: List patient records
      tags:
      - Admin
      - Patients
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Patient records retrieved successfully
        '401':
          description: Authentication required
        '403':
          description: Staff access required
        '500':
          description: Internal server error
  /diagnosis/export/csv/:
    get:
      operationId: export_patients_csv
      description: Export patient records in CSV format. Staff users get all records,
        regular users get only their own records.
      summary: Export patient records as CSV
      tags:
      - Export
      - Patients
      security:
      - jwtAuth: []
      responses:
        '200':
          description: CSV file generated successfully
        '401':
          description: Authentication required
        '500':
          description: Internal server error
  /diagnosis/export/excel/:
    get:
      operationId: export_patients_excel
      description: Export patient records in Excel format. Staff users get all records,
        regular users get only their own records.
      summary: Export patient records as Excel
      tags:
      - Export
      - Patients
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Excel file generated successfully
        '401':
          description: Authentication required
        '500':
          description: Internal server error
  /ai/chats/:
    get:
      operationId: list_chats
      description: Retrieve all chat conversations for the authenticated user with
        message counts and last message previews.
      summary: List user chats
      tags:
      - AI Assistant
      - Chats
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatList'
          description: Chat list retrieved successfully
        '401':
          description: Authentication required
        '500':
          description: Internal server error
    post:
      operationId: create_chat
      description: Create a new chat conversation for the authenticated user.
      summary: Create new chat
      tags:
      - AI Assistant
      - Chats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatListRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatListRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatListRequest'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: Chat created successfully
        '401':
          description: Authentication required
        '500':
          description: Internal server error
  /ai/chats/{chat_id}/:
    get:
      operationId: get_chat_detail
      description: Retrieve complete chat conversation with all messages for the authenticated
        user.
      summary: Get chat details
      parameters:
      - in: path
        name: chat_id
        schema:
          type: string
          format: uuid
        description: UUID of the chat to retrieve
        required: true
      tags:
      - AI Assistant
      - Chats
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
          description: Chat details retrieved successfully
        '401':
          description: Authentication required
        '404':
          description: Chat not found
        '500':
          description: Internal server error
    patch:
      operationId: update_chat
      description: Update chat information such as title for the authenticated user.
      summary: Update chat details
      parameters:
      - in: path
        name: chat_id
        schema:
          type: string
          format: uuid
        description: UUID of the chat to update
        required: true
      tags:
      - AI Assistant
      - Chats
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: New title for the chat
                  maxLength: 255
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Chat updated successfully
        '401':
          description: Authentication required
        '404':
          description: Chat not found
        '500':
          description: Internal server error
    delete:
      operationId: delete_chat
      description: Permanently delete a chat conversation and all its messages for
        the authenticated user.
      summary: Delete chat
      parameters:
      - in: path
        name: chat_id
        schema:
          type: string
          format: uuid
        description: UUID of the chat to delete
        required: true
      tags:
      - AI Assistant
      - Chats
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Chat deleted successfully
        '401':
          description: Authentication required
        '404':
          description: Chat not found
        '500':
          description: Internal server error
  /ai/chats/{chat_id}/messages/:
    post:
      operationId: send_message
      description: Send a message to the AI assistant in a specific chat and receive
        an AI-generated response. The system maintains conversation context and automatically
        updates user statistics.
      summary: Send message to AI
      parameters:
      - in: path
        name: chat_id
        schema:
          type: string
          format: uuid
        description: UUID of the chat to send message to
        required: true
      tags:
      - AI Assistant
      - Messages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MessageCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MessageCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user_message:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      content:
                        type: string
                      is_from_user:
                        type: boolean
                      created_at:
                        type: string
                        format: date-time
                  ai_message:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      content:
                        type: string
                      is_from_user:
                        type: boolean
                      created_at:
                        type: string
                        format: date-time
                  chat_title:
                    type: string
          description: Message sent and AI response received successfully
        '400':
          description: Invalid message content
        '401':
          description: Authentication required
        '404':
          description: Chat not found
        '500':
          description: AI service error or internal server error
  /ai/profile/:
    get:
      operationId: get_user_profile
      description: Retrieve AI assistant usage statistics and preferences for the
        authenticated user.
      summary: Get user AI profile
      tags:
      - AI Assistant
      - Profile
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: User profile retrieved successfully
        '401':
          description: Authentication required
        '500':
          description: Internal server error
    patch:
      operationId: update_user_profile
      description: Update AI assistant preferences for the authenticated user.
      summary: Update user AI profile
      tags:
      - AI Assistant
      - Profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                preferred_model:
                  type: string
                  description: Preferred AI model for responses
                  maxLength: 50
                  examples:
                  - gpt-3.5-turbo
                  - gpt-4
                  - gemini-pro
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: User profile updated successfully
        '401':
          description: Authentication required
        '500':
          description: Internal server error
components:
  schemas:
    Chat:
      type: object
      description: Serializer for Chat model with messages and metadata
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique UUID identifier for the chat
        title:
          type: string
          description: Chat title, auto-generated from first user message if not set
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the chat was created
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the chat was last modified
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
          readOnly: true
        message_count:
          type: integer
          readOnly: true
          description: Total number of messages in this chat conversation
        last_message:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Preview of the most recent message in the chat (truncated to
            100 characters)
      required:
      - created_at
      - id
      - last_message
      - message_count
      - messages
      - updated_at
    ChatList:
      type: object
      description: Simplified serializer for chat list view without message details
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique UUID identifier for the chat
        title:
          type: string
          description: Chat title, auto-generated from first message if empty
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Chat creation timestamp in ISO format
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Last modification timestamp in ISO format
        message_count:
          type: integer
          readOnly: true
          description: Total number of messages in this chat
        last_message:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Preview of the most recent message (content truncated to 100
            chars)
      required:
      - created_at
      - id
      - last_message
      - message_count
      - updated_at
    ChatListRequest:
      type: object
      description: Simplified serializer for chat list view without message details
      properties:
        title:
          type: string
          description: Chat title, auto-generated from first message if empty
          maxLength: 255
    CustomTokenObtainPairRequest:
      type: object
      description: Custom JWT token serializer with additional user data
      properties:
        email:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password
    Email:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    EmailCheckRequest:
      type: object
      description: Serializer for checking email availability during registration.
      properties:
        email:
          type: string
          format: email
          minLength: 1
          description: Email address to check for availability
      required:
      - email
    EmailRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    HCVPatient:
      type: object
      description: Serializer for HCV Patient data with comprehensive liver function
        test parameters.
      properties:
        id:
          type: integer
          readOnly: true
        patient_name:
          type: string
          maxLength: 100
        age:
          type: integer
          maximum: 120
          minimum: 0
        sex:
          $ref: '#/components/schemas/SexEnum'
        alp:
          type: number
          format: double
          minimum: 0
          description: Alkaline Phosphatase
        ast:
          type: number
          format: double
          minimum: 0
          description: Aspartate Aminotransferase
        che:
          type: number
          format: double
          minimum: 0
          description: Cholinesterase
        crea:
          type: number
          format: double
          minimum: 0
          description: Creatinine
        cgt:
          type: number
          format: double
          minimum: 0
          description: Gamma-Glutamyl Transferase
        alb:
          type: number
          format: double
          minimum: 0
          nullable: true
          description: Albumin
        bil:
          type: number
          format: double
          minimum: 0
          nullable: true
          description: Bilirubin
        chol:
          type: number
          format: double
          minimum: 0
          nullable: true
          description: Cholesterol
        prot:
          type: number
          format: double
          minimum: 0
          nullable: true
          description: Protein
        alt:
          type: number
          format: double
          minimum: 0
          nullable: true
          description: Alanine Aminotransferase
        symptoms:
          description: List of symptoms
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: string
          readOnly: true
      required:
      - age
      - alp
      - ast
      - cgt
      - che
      - crea
      - created_at
      - created_by
      - id
      - patient_name
      - sex
      - updated_at
    HCVPatientRequest:
      type: object
      description: Serializer for HCV Patient data with comprehensive liver function
        test parameters.
      properties:
        patient_name:
          type: string
          minLength: 1
          maxLength: 100
        age:
          type: integer
          maximum: 120
          minimum: 0
        sex:
          $ref: '#/components/schemas/SexEnum'
        alp:
          type: number
          format: double
          minimum: 0
          description: Alkaline Phosphatase
        ast:
          type: number
          format: double
          minimum: 0
          description: Aspartate Aminotransferase
        che:
          type: number
          format: double
          minimum: 0
          description: Cholinesterase
        crea:
          type: number
          format: double
          minimum: 0
          description: Creatinine
        cgt:
          type: number
          format: double
          minimum: 0
          description: Gamma-Glutamyl Transferase
        alb:
          type: number
          format: double
          minimum: 0
          nullable: true
          description: Albumin
        bil:
          type: number
          format: double
          minimum: 0
          nullable: true
          description: Bilirubin
        chol:
          type: number
          format: double
          minimum: 0
          nullable: true
          description: Cholesterol
        prot:
          type: number
          format: double
          minimum: 0
          nullable: true
          description: Protein
        alt:
          type: number
          format: double
          minimum: 0
          nullable: true
          description: Alanine Aminotransferase
        symptoms:
          description: List of symptoms
      required:
      - age
      - alp
      - ast
      - cgt
      - che
      - crea
      - patient_name
      - sex
    HCVResult:
      type: object
      description: Serializer for HCV diagnosis results generated by AI model.
      properties:
        patient:
          type: integer
        hcv_status:
          allOf:
          - $ref: '#/components/schemas/HcvStatusEnum'
          description: |-
            HCV diagnosis status

            * `Positive` - Positive
            * `Negative` - Negative
            * `Inconclusive` - Inconclusive
        hcv_status_probability:
          type: number
          format: double
          maximum: 1.0
          minimum: 0.0
          description: Probability of HCV status
        hcv_risk:
          allOf:
          - $ref: '#/components/schemas/HcvRiskEnum'
          description: |-
            Risk level

            * `Low` - Low
            * `Medium` - Medium
            * `High` - High
        hcv_stage:
          allOf:
          - $ref: '#/components/schemas/HcvStageEnum'
          description: |-
            Liver disease stage

            * `Blood donors` - Blood donors
            * `Hepatitis` - Hepatitis
            * `Fibrosis` - Fibrosis
            * `Cirrhosis` - Cirrhosis
        confidence:
          type: number
          format: double
          maximum: 1.0
          minimum: 0.0
          description: Model confidence score
        hcv_stage_probability:
          description: Probability for each stage
        recommendation:
          type: string
          description: AI-generated clinical recommendation
        diagnosis_completed:
          type: boolean
        analysis_duration:
          type: string
          nullable: true
          description: Time taken for analysis
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - confidence
      - created_at
      - hcv_risk
      - hcv_stage
      - hcv_stage_probability
      - hcv_status
      - hcv_status_probability
      - patient
      - recommendation
      - updated_at
    HcvRiskEnum:
      enum:
      - Low
      - Medium
      - High
      type: string
      description: |-
        * `Low` - Low
        * `Medium` - Medium
        * `High` - High
    HcvStageEnum:
      enum:
      - Blood donors
      - Hepatitis
      - Fibrosis
      - Cirrhosis
      type: string
      description: |-
        * `Blood donors` - Blood donors
        * `Hepatitis` - Hepatitis
        * `Fibrosis` - Fibrosis
        * `Cirrhosis` - Cirrhosis
    HcvStatusEnum:
      enum:
      - Positive
      - Negative
      - Inconclusive
      type: string
      description: |-
        * `Positive` - Positive
        * `Negative` - Negative
        * `Inconclusive` - Inconclusive
    Message:
      type: object
      description: Serializer for Message model with comprehensive field documentation
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Unique identifier for the message
        content:
          type: string
          description: The actual message content (user input or AI response)
        is_from_user:
          type: boolean
          description: True if message is from user, False if from AI assistant
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the message was created
      required:
      - content
      - created_at
      - id
    MessageCreateRequest:
      type: object
      description: Serializer for creating new messages with validation
      properties:
        message:
          type: string
          minLength: 1
          description: Message content to send to the AI assistant (max 10,000 characters)
          maxLength: 10000
      required:
      - message
    PasswordToken:
      type: object
      properties:
        password:
          type: string
        token:
          type: string
      required:
      - password
      - token
    PasswordTokenRequest:
      type: object
      properties:
        password:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
      required:
      - password
      - token
    PatchedProfileRequest:
      type: object
      description: |-
        Comprehensive user profile serializer.
        Handles user profile information including personal details,
        contact information, account status, and preferences.
      properties:
        username:
          type: string
          nullable: true
          description: User's display username
          maxLength: 150
        birthday:
          type: string
          format: date
          nullable: true
          description: User's date of birth (YYYY-MM-DD format)
        full_name:
          type: string
          description: User's complete name
          maxLength: 300
        first_name:
          type: string
          description: User's first name
          maxLength: 150
        last_name:
          type: string
          description: User's last name
          maxLength: 150
        profile_picture:
          type: string
          format: uri
          description: URL to user's profile picture
          maxLength: 2048
        phone_number:
          type: string
          description: User's phone number
          pattern: ^\+?1?\d{9,15}$
          maxLength: 20
        country:
          type: string
          description: User's country of residence
          maxLength: 100
        city:
          type: string
          description: User's city of residence
          maxLength: 100
        timezone:
          type: string
          description: User's preferred timezone
          maxLength: 50
    PatientWithResult:
      type: object
      description: Comprehensive serializer that includes patient data with their
        HCV result.
      properties:
        id:
          type: integer
          readOnly: true
        patient_name:
          type: string
          maxLength: 100
        age:
          type: integer
          maximum: 120
          minimum: 0
        sex:
          $ref: '#/components/schemas/SexEnum'
        alp:
          type: number
          format: double
          minimum: 0
          description: Alkaline Phosphatase
        ast:
          type: number
          format: double
          minimum: 0
          description: Aspartate Aminotransferase
        che:
          type: number
          format: double
          minimum: 0
          description: Cholinesterase
        crea:
          type: number
          format: double
          minimum: 0
          description: Creatinine
        cgt:
          type: number
          format: double
          minimum: 0
          description: Gamma-Glutamyl Transferase
        alb:
          type: number
          format: double
          minimum: 0
          nullable: true
          description: Albumin
        bil:
          type: number
          format: double
          minimum: 0
          nullable: true
          description: Bilirubin
        chol:
          type: number
          format: double
          minimum: 0
          nullable: true
          description: Cholesterol
        prot:
          type: number
          format: double
          minimum: 0
          nullable: true
          description: Protein
        alt:
          type: number
          format: double
          minimum: 0
          nullable: true
          description: Alanine Aminotransferase
        symptoms:
          description: List of symptoms
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: string
          readOnly: true
        hcv_result:
          allOf:
          - $ref: '#/components/schemas/HCVResult'
          readOnly: true
      required:
      - age
      - alp
      - ast
      - cgt
      - che
      - crea
      - created_at
      - created_by
      - hcv_result
      - id
      - patient_name
      - sex
      - updated_at
    RegisterRequest:
      type: object
      description: |-
        Serializer for user registration.
        Creates new user accounts with email, full name, and password validation.
      properties:
        full_name:
          type: string
          description: User's full name
          maxLength: 300
        email:
          type: string
          format: email
          minLength: 1
          description: Valid email address (will be used as username)
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 1
          description: User password (minimum 8 characters)
      required:
      - email
      - password
    ResetToken:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    ResetTokenRequest:
      type: object
      properties:
        token:
          type: string
          minLength: 1
      required:
      - token
    SexEnum:
      enum:
      - Male
      - Female
      - Other
      type: string
      description: |-
        * `Male` - Male
        * `Female` - Female
        * `Other` - Other
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
      required:
      - access
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
    UserProfile:
      type: object
      description: Serializer for UserProfile model with AI usage statistics
      properties:
        total_tokens_used:
          type: integer
          readOnly: true
          description: Cumulative number of AI tokens consumed by the user across
            all conversations
        daily_message_count:
          type: integer
          readOnly: true
          description: Number of messages sent by the user today (resets daily)
        last_activity:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp of the user's last interaction with the AI assistant
        preferred_model:
          type: string
          description: User's preferred AI model for generating responses
          maxLength: 50
        total_chats:
          type: integer
          readOnly: true
          description: Total number of chat conversations created by the user
      required:
      - daily_message_count
      - last_activity
      - total_chats
      - total_tokens_used
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
servers:
- url: http://127.0.0.1:8000
  description: Development server
- url: https://api.hepatocai.com
  description: Production server
externalDocs:
  description: Full documentation
  url: https://docs.hepatocai.com/
