"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
import os

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

FRONTEND_URL = os.getenv("FRONTEND_URL", "http://localhost:5173")
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8000")
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", default="django-insecure-!@#4$%^&*()")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False").lower() == "true"

# ALLOWED_HOSTS setting - required when DEBUG=False
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "import_export",  # For data import/export functionality
    # "api",
    "users",
    "diagnosis",
    "aiassistant",
    "rest_framework",
    "drf_spectacular",  # API documentation
    "django_rest_passwordreset",
    "corsheaders",
    # Django apps
    "django.contrib.sites",  # required by allauth
    # Allauth apps
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",  # Google provider
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Add this for static files
    "utils.security.SecurityMiddleware",  # Custom security middleware
    "utils.performance.PerformanceMiddleware",  # Performance monitoring
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "backend.urls"

AUTH_USER_MODEL = "users.CustomUser"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Production database configuration (PostgreSQL recommended)
DATABASES = (
    {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("DB_NAME"),
            "USER": os.getenv("DB_USER"),
            "PASSWORD": os.getenv("DB_PASSWORD"),
            "HOST": os.getenv("DB_HOST"),
            "PORT": os.getenv("DB_PORT"),
        }
    }
    if not DEBUG and os.getenv("DB_NAME")
    else {
        # Fallback to SQLite for development only
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
)


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"  # Set to UTC for consistent timezone handling

USE_I18N = True

USE_TZ = True  # Ensure timezone support is enabled


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CORS settings
CORS_ALLOWED_ORIGINS = [
    FRONTEND_URL,  # Frontend development server
    BACKEND_URL,  # Backend itself
]
CORS_ALLOW_CREDENTIALS = True

# Email settings
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")  # Your Gmail address
EMAIL_HOST_PASSWORD = os.getenv(
    "EMAIL_HOST_PASSWORD"
)  # Use app password, not your main password
DEFAULT_FROM_EMAIL = f"HepatoCAI Team <{os.getenv('EMAIL_HOST_USER')}>"


# Allauth settings
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",  # default
    "allauth.account.auth_backends.AuthenticationBackend",  # for allauth
]


SITE_ID = os.getenv("SITE_ID", 3)

LOGIN_REDIRECT_URL = "/users/accounts/google/login/redirect/"
LOGOUT_REDIRECT_URL = "/"

# Optional: allauth settings
ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]
ACCOUNT_EMAIL_VERIFICATION = "optional"
SOCIALACCOUNT_LOGIN_ON_GET = True
SOCIALACCOUNT_AUTO_SIGNUP = True


# google Oauth2 settings
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APP": {
            "client_id": os.getenv("GOOGLE_CLIENT_ID"),
            "secret": os.getenv("GOOGLE_CLIENT_SECRET"),
            "key": "",
        },
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
        "REDIRECT_URI": f"{BACKEND_URL}/accounts/google/login/callback/",
    }
}

# Custom social account adapter
# this is used to link social accounts to existing users
#  if a user create a account with email and password and then log in with google (its send us to a intermediate page)
# this solve my problem
SOCIALACCOUNT_ADAPTER = "users.adapters.MySocialAccountAdapter"


# Logging Configuration
# Import logging configuration
from .logging_config import LOGGING

# =============================================================================
# PERFORMANCE CONFIGURATION
# =============================================================================

# Cache configuration
CACHES = {
    "default": {
        "BACKEND": (
            "django_redis.cache.RedisCache"
            if not DEBUG and os.getenv("REDIS_URL")
            else "django.core.cache.backends.locmem.LocMemCache"
        ),
        "LOCATION": (
            os.getenv("REDIS_URL", "redis://127.0.0.1:6379/1")
            if not DEBUG and os.getenv("REDIS_URL")
            else "unique-snowflake"
        ),
        "TIMEOUT": int(os.getenv("CACHE_TIMEOUT", 300)),
        "OPTIONS": (
            {
                "MAX_ENTRIES": 1000,
                "CULL_FREQUENCY": 3,
            }
            if DEBUG
            else {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            }
        ),
    }
}

# Database connection settings
if "default" in DATABASES:
    DATABASES["default"]["CONN_MAX_AGE"] = int(os.getenv("DB_CONN_MAX_AGE", 0))

# Performance monitoring settings
PERFORMANCE_MONITORING = os.getenv("PERFORMANCE_MONITORING", "True").lower() == "true"
SLOW_QUERY_THRESHOLD = float(os.getenv("SLOW_QUERY_THRESHOLD", 2.0))
HIGH_QUERY_COUNT_THRESHOLD = int(os.getenv("HIGH_QUERY_COUNT_THRESHOLD", 10))

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# Rate limiting settings
RATE_LIMIT_ENABLED = os.getenv("RATE_LIMIT_ENABLED", "True").lower() == "true"

# Security headers
SECURE_SSL_REDIRECT = os.getenv("SECURE_SSL_REDIRECT", "False").lower() == "true"
SECURE_HSTS_SECONDS = int(os.getenv("SECURE_HSTS_SECONDS", 31536000))
SECURE_CONTENT_TYPE_NOSNIFF = (
    os.getenv("SECURE_CONTENT_TYPE_NOSNIFF", "True").lower() == "true"
)
SECURE_BROWSER_XSS_FILTER = (
    os.getenv("SECURE_BROWSER_XSS_FILTER", "True").lower() == "true"
)
X_FRAME_OPTIONS = os.getenv("X_FRAME_OPTIONS", "DENY")

# CSRF and session security
CSRF_COOKIE_SECURE = os.getenv("CSRF_COOKIE_SECURE", "False").lower() == "true"
SESSION_COOKIE_SECURE = os.getenv("SESSION_COOKIE_SECURE", "False").lower() == "true"

# Security monitoring
SECURITY_AUDIT_ENABLED = os.getenv("SECURITY_AUDIT_ENABLED", "True").lower() == "true"
SUSPICIOUS_ACTIVITY_THRESHOLD = int(os.getenv("SUSPICIOUS_ACTIVITY_THRESHOLD", 5))

# =============================================================================
# APPLICATION FEATURES
# =============================================================================

# Pagination
REST_FRAMEWORK["PAGE_SIZE"] = int(os.getenv("DEFAULT_PAGE_SIZE", 20))


# =============================================================================
# API DOCUMENTATION SETTINGS
# =============================================================================

# DRF Spectacular settings for API documentation
SPECTACULAR_SETTINGS = {
    "TITLE": "HepatoCAI API",
    "DESCRIPTION": "A comprehensive API for hepatitis C diagnosis and management using AI-powered tools.",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
        "displayOperationId": True,
        # Disable in production for security
        "displayRequestDuration": DEBUG,
        "docExpansion": "none" if not DEBUG else "list",
    },
    "COMPONENT_SPLIT_REQUEST": True,
    "SORT_OPERATIONS": False,
    "SCHEMA_PATH_PREFIX": r"/api/v[0-9]",
    # CRITICAL: Secure API documentation access in production
    "SERVE_PERMISSIONS": ["rest_framework.permissions.AllowAny"],
    # Only include development server in DEBUG mode
    "SERVERS": (
        [{"url": "http://127.0.0.1:8000", "description": "Development server"}]
        if DEBUG
        else [
            {"url": BACKEND_URL, "description": "Production server"},
        ]
    ),
    "EXTERNAL_DOCS": {
        "description": "Full documentation",
        "url": "https://docs.hepatocai.com/",
    },
    "CONTACT": {
        "name": "HepatoCAI API Support",
        "email": "api-support@hepatocai.com",
    },
    "LICENSE": {
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT",
    },
    # Additional production security settings
    "DISABLE_ERRORS_AND_WARNINGS": not DEBUG,
    "SERVE_PUBLIC": DEBUG,  # Only serve publicly in development
}
